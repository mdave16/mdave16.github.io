<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://mdave16.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://mdave16.github.io/" rel="alternate" type="text/html" /><updated>2021-07-05T20:33:56+00:00</updated><id>http://mdave16.github.io/feed.xml</id><title type="html">Mayur Dave</title><subtitle>Personal website of Mayur Dave, software engineer who enjoys maths and board games.</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;mdave248&quot;, &quot;github&quot;=&gt;&quot;mdave16&quot;}</name></author><entry><title type="html">Information Systems</title><link href="http://mdave16.github.io/2021/03/15/information-systems/" rel="alternate" type="text/html" title="Information Systems" /><published>2021-03-15T00:00:00+00:00</published><updated>2021-03-15T00:00:00+00:00</updated><id>http://mdave16.github.io/2021/03/15/information-systems</id><content type="html" xml:base="http://mdave16.github.io/2021/03/15/information-systems/">&lt;p&gt;I have had this idea, but have been unable to come up for the vocabulary for it.&lt;/p&gt;

&lt;p&gt;Consider the following framework for thinking about our work as software engineers. There is a product that you maintain, and something is not working as the customer wants it to, either since it’s a bug or a feature they want or need. The first step is to use information at our disposal in order to learn about our product, so to make a decision of the solution. The second step is to optimally implement that solution.&lt;/p&gt;

&lt;p&gt;Given this framework, there are lots of books that tell you how to do the second step, for instance Clean Code or Design Patterns. I’m more interested in the first step. Some examples of the first step:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Should I add a rate limit on my application? Should I remove this feature, is it unused or being misused? … which falls under the camp of Should I add a feature?&lt;/li&gt;
  &lt;li&gt;Why does this feature show for this customer but not for this customer? Why does this customer get an NPE?… which fall under the camp of Why is there a bug?&lt;/li&gt;
  &lt;li&gt;How is the payment mechanism working and can I use it to add my feature more easily? Is there an internal api that already does this job? aka Can I add this feature cheaper?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now when we want to answer these questions, we actually have systems that can give us this information. By system, I mean either a set of habits, so can be relied upon e.g. git commits or a programmatic system e.g. an API.&lt;/p&gt;

&lt;p&gt;Some examples of such systems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The code itself; you can always read the code, whether you can understand it is an unrelated question. A benefit is that the code never lies, this is what is in production (after checking out the correct version).&lt;/li&gt;
  &lt;li&gt;A work tracking tool, e.g. Jira, maybe you can search through the history and why find a certain change was made or why a decision was made. This is just an organised wiki, since it’s all edited by humans and can be updated by anyone at anytime.&lt;/li&gt;
  &lt;li&gt;A wiki, a disorganised work tracking tool, with the added disadvantage that it is easy to not keep up to date. A pro is that if people are effective writers, then the wiki can be really useful.&lt;/li&gt;
  &lt;li&gt;Official documentation of a tool.&lt;/li&gt;
  &lt;li&gt;A historian, like a wiki but worse since humans are worse at remembering things than machines are, but better since only one editor is allowed.&lt;/li&gt;
  &lt;li&gt;git commits - pro: very close to the code, con: relies on humans and effective communication, also has multiple styles.&lt;/li&gt;
  &lt;li&gt;pull requests - similar to git commits but better for providing a higher level overview of a change&lt;/li&gt;
  &lt;li&gt;source code host search, e.g. github search or gitlab search&lt;/li&gt;
  &lt;li&gt;slack messages - since slack is a Searchable Log of All Communication and Knowledge, it is certainly a place to look for information.&lt;/li&gt;
  &lt;li&gt;Cloud provider API/UI - e.g. AWS that can tell you the version that is currently in prod&lt;/li&gt;
  &lt;li&gt;Metrics - e.g. ELK, Prometheus + Grafana&lt;/li&gt;
  &lt;li&gt;Direct db queries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each system has a certain cost, to maintain it, and each system gets us some information with some degree of reliability. One of the problems I would like to think about is how to manage the set of systems an engineering team leverages in order to get the information they need for minimal cost? Another question, is that if one were to move to a new team, where the set of systems is different, or perhaps organised differently, how quickly can one orient themselves to the new set of systems.&lt;/p&gt;

&lt;p&gt;Picture this scenario: You work somewhere, and you are very used to the set of systems available to you. You change your working team, either by moving teams or by moving companies. The new team organises things totally differently, and you feel lost because you’re in a different kitchen. One can assume the new team has a set of systems, and is not just running around in the dark like magicians or mute historians. You exclaim, “Hey team, you are not using one of the systems I was reliant upon in my old team, and I feel out of place, can everyone start using my system?”. Maybe you’ve said these words, maybe you’ve heard them. Here’s a more concrete example: “Hey, can everyone put jira ticket ids in front of git commit messages and inside the git pull requests, I find it really useful and am annoyed that I’m the only one doing it”.  Which leads to an interesting question of how does a system organically get added, and organically leave? By asking people, and annoying them into it like a cop, you feel angry for forcing them, and they feel angry for being micromanaged. Maybe the information that you want to introduce is only seen as valuable by you, maybe they have another system which you have not found yet which gathers that information?&lt;/p&gt;

&lt;p&gt;If you have better names for any of the things I am talking about, or want to discuss them just leave me a message and some way of contacting you. Also if you know anyone who has written about this and already explored these topics, then give me a shout, I’d love to read up on this.&lt;/p&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;mdave248&quot;, &quot;github&quot;=&gt;&quot;mdave16&quot;}</name></author><category term="Programming Tools" /><category term="Information Systems" /><summary type="html">I have had this idea, but have been unable to come up for the vocabulary for it.</summary></entry><entry><title type="html">Automate Problems Away with Token Jobs</title><link href="http://mdave16.github.io/2019/12/30/automate-problems-using-token/" rel="alternate" type="text/html" title="Automate Problems Away with Token Jobs" /><published>2019-12-30T00:00:00+00:00</published><updated>2019-12-30T00:00:00+00:00</updated><id>http://mdave16.github.io/2019/12/30/automate-problems-using-token</id><content type="html" xml:base="http://mdave16.github.io/2019/12/30/automate-problems-using-token/">&lt;p&gt;Got a problem? Spend some time writing a script to do it for you. Got a bigger problem? Write a service which fixes it for you. Want to solve problems with software engineering? Use Token Jobs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.ebayinc.com/static/assets/Uploads/Blog/Posts/_resampled/FillWyI4MDAiLDU1MF0/IMG-1641.jpg&quot; alt=&quot;Developer looking at screen.&quot; title=&quot;How to fix this?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A developer in the wild can be confronted by many problems. Some of these problems will be slow or repetitive tasks, some will be the lack of adoption of tools which could help, and some will be convincing others that the first two are problems. How does the developer manage to fend off these problems?&lt;/p&gt;

&lt;p&gt;One way the humble developer might fix this problem is by massaging any pain points when they see fit and working away on making everything pristine. While this seems like an appropriate solution, it only works in the short term. In the long term, it’s not cost effective and when the business suffers, so does the developer.&lt;/p&gt;

&lt;p&gt;Another solution is to use &lt;a href=&quot;https://leadingagileteams.com/2015/09/01/making-time-for-personal-development-gold-cards/&quot;&gt;Gold Cards&lt;/a&gt; — tickets that the developer can present to the team which allows them to work on personal development for half a day per week, for a total of one day per two-week sprint. However, we didn’t want a time limit to pressure our tinkering. It also wouldn’t work because we are a team who continuously delivers rather than using sprints.&lt;/p&gt;

&lt;p&gt;Here at Shutl, we created something called The Token. The Token is a physical statue with wrenches, as shown above. While it is a physical object, The Token is more of an idea. Whomever has The Token can work on an issue that annoys them and that they feel fixing would improve their work.&lt;/p&gt;

&lt;p&gt;One benefit from The Token is that there is no backlog to circumvent, no product owners or business people to convince. The reason this works is due to trust. There is a high level of trust among the developers and, in turn, we feel trusted and supported. Whenever we have a pain point, we know that we can simply take The Token and fix it the way we do best, by programming.&lt;/p&gt;

&lt;p&gt;We chose this solution because we believe it is empowering. Shutl is made up entirely of motivated individuals. The Token gives them support to do their jobs with full autonomy. Allowing our engineers to develop in such a way has been empowering for us, making us feel like players rather than pawns and ensuring we have &lt;a href=&quot;https://labs.spotify.com/2014/09/16/squad-health-check-model/&quot;&gt;a healthy team&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another benefit we gain is having space to fail. It is important to have space to fail in order to innovate. If you have an idea that could help, but does not work, that’s OK. By having the space to fail, you can experiment freely and explore, which allows us to be innovative. Most new technologies and concepts started off as a token task.&lt;/p&gt;

&lt;p&gt;I think it’s safe to say The Token has been a success. Since its introduction, we’ve had fewer problems, and the team has been generally happier. In the beginning, the token was used very often, but as time goes on we’ve used the token less. At the moment there are no plans to change or improve on The Token. The Token is just a tool for improving our code quality, which it has done and continues to do.&lt;/p&gt;

&lt;p&gt;This isn’t a silver bullet, however; it’s important to consider any downfalls. One possible concern is that by giving the engineers free rein, they may not work on what the business needs. However, by having one token and, at most, one ongoing job at any given time, we can be sure that there will still be deliverable change.&lt;/p&gt;

&lt;p&gt;It is clear existence of a token, and the ongoing work on tokens can slow down the pace of delivery in the short term. However, having a nicer and healthier system leads to happier developers and can speed up the pace of delivery in the long term. Although not new, we know most extreme programming practices lead to long-term solutions of sustainable development practices.&lt;/p&gt;
&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Two of the main tools that were developed in-house started off as Token jobs.
&lt;a href=&quot;/2019/03/27/shipship/&quot;&gt;&lt;img src=&quot;https://static.ebayinc.com/static//assets/Uploads/Editor/_resampled/ResizedImageWzMzMCwzMzJd/shipship-logo.png&quot; alt=&quot;shipship&quot; title=&quot;shipship&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/2019/03/27/shipship/&quot;&gt;ShipShip&lt;/a&gt;: We found a problem with coordinating stand ups and deployments with the USA. We took The Token, built a very simple version of the one seen here. We solved the stand up issue and made it easier to deploy. ShipShip has been improved since then, but the difficult first step was a token job.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ebayinc.com/stories/blogs/tech/failbot/&quot;&gt;&lt;img src=&quot;https://static.ebayinc.com/static/assets/Uploads/Editor/logo.svg&quot; alt=&quot;failbot&quot; title=&quot;failbot&quot; height=&quot;330&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ebayinc.com/stories/blogs/tech/failbot/&quot;&gt;FailBot&lt;/a&gt;: We had an issue with flaky tests and being unsure if a failure was real or not. Once again, The Token gave us a start with FailBot, which was considerably improved on by later Token jobs.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;All in all, the token has been serving us well. It has certainly helped us find solutions, from keeping track of stories to ensuring we are not blocked by flaky tests.&lt;/p&gt;

&lt;p&gt;Things work best when engineers do what they do best and automate the problems away. Ultimately, The Token is simply an efficient means to an end.&lt;/p&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;mdave248&quot;, &quot;github&quot;=&gt;&quot;mdave16&quot;}</name></author><category term="Agile" /><category term="Coding Practices" /><category term="Internal Open Source" /><category term="eBay" /><category term="Developer Tools" /><category term="Culture" /><category term="Shutl" /><summary type="html">Got a problem? Spend some time writing a script to do it for you. Got a bigger problem? Write a service which fixes it for you. Want to solve problems with software engineering? Use Token Jobs.</summary></entry><entry><title type="html">ShipShip — The Automated Kanban Board</title><link href="http://mdave16.github.io/2019/03/27/shipship/" rel="alternate" type="text/html" title="ShipShip — The Automated Kanban Board" /><published>2019-03-27T00:00:00+00:00</published><updated>2019-03-27T00:00:00+00:00</updated><id>http://mdave16.github.io/2019/03/27/shipship</id><content type="html" xml:base="http://mdave16.github.io/2019/03/27/shipship/">&lt;p&gt;At eBay, each development team works with multiple distributed teams. To keep everyone on the same page with the different projects that they are working on, we built a tool called ShipShip to help keep information flowing.&lt;/p&gt;

&lt;p&gt;ShipShip is an automated Kanban Board that fetches information from &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;, our internal deployment platform, and &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt;, stitches everything together, and throws out an automated Kanban Board that moves with pull requests, builds, and deployments. The only manual step in the process is to manually verify each story in QA.&lt;/p&gt;

&lt;p&gt;This started out as a quick tool created as a part of my internship to show deployment status for every commit on our master branch. After the initial version was released, we kept adding more and more helpful features, and now it is a stand-alone service we use every day for stand-ups and deployments.&lt;/p&gt;

&lt;p&gt;We strive for continuous delivery, working closely to the &lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;GitHub flow&lt;/a&gt;. In a nutshell, for each piece of work, we create a pull request. When ready, after review, it is merged back to master. After going through a CI, we check our changes in QA/staging before deploying master to production. We have built ShipShip to work around us.&lt;/p&gt;

&lt;p&gt;&lt;img title=&quot;The zen of the github flow&quot; src=&quot;https://static.ebayinc.com/static/assets/Uploads/Editor/_resampled/ResizedImageWzYwMCw1MV0/Screen-Shot-2018-12-19-at-22.23.22.png&quot; alt=&quot;Analysis -&amp;gt; Coding &amp;lt;-&amp;gt; Review -&amp;gt; Validate -&amp;gt; Deploy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At Shutl, we use seven columns to track the progress of anything, as shown in the following figure.&lt;/p&gt;

&lt;p&gt;&lt;img title=&quot;Kanban Overview&quot; src=&quot;https://static.ebayinc.com/static/assets/Uploads/Editor/_resampled/ResizedImageWzYwMCwzMzhd/Screen-Shot-2018-11-29-at-16.14.43.png&quot; alt=&quot;Kanban Overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s follow a story.&lt;/p&gt;

&lt;p&gt;&lt;img title=&quot;A sample card from the Review column&quot; src=&quot;https://static.ebayinc.com/static/assets/Uploads/Editor/_resampled/ResizedImageWzQwMCwyMzld/Screen-Shot-2018-11-29-at-17.04.54.png&quot; alt=&quot;A sample card from the Review column&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice the conflicts in this pull request.&lt;/p&gt;

&lt;p&gt;This is the card that opens when a new pull request is opened, usually in the “in progress”, or the “review” columns, indicating whether it is ready or still being worked on. It allows you to see the team, the repo, the author — all the usual suspects, as taken from Git, and our deployment tool. It also shows conflicts and whether the PR build has failing tests. The only difference between work in progress and review is if you have tagged it for review on Git.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.ebayinc.com/static/assets/Uploads/Editor/_resampled/ResizedImageWzM5OCwyNDJd/Screen-Shot-2018-11-29-at-16.15.07.png&quot; title=&quot;A card which is merged but not deployed&quot; alt=&quot;A card which is merged but not deployed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The grey clock symbolizes that this is merged and not yet deployed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.ebayinc.com/static/assets/Uploads/Editor/_resampled/ResizedImageWzQwMCwzMzJd/Screen-Shot-2018-11-29-at-17.15.48.png&quot; title=&quot;Engineer Approval&quot; alt=&quot;Engineer Approval&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In QA, the engineer checks it out. Notice this is the first time you’ve interacted with ShipShip directly. You sign off whether the change has the desired effect on QA. Shortly after, a product manager will run an acceptance test to say this is indeed the changes requested.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.ebayinc.com/static/assets/Uploads/Editor/_resampled/ResizedImageWzM5OSwyMDZd/Screen-Shot-2018-11-29-at-17.24.14.png&quot; title=&quot;Product Approval&quot; alt=&quot;Product Approval&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A reset button has been provided for mis-clicks and misunderstandings. If there’s something to communicate, you can even comment to point things out. To filter out some noise, there are filters for individual users, projects, and teams. Here we are going to filter cards that are being worked on by the &lt;a href=&quot;https://ebaytech.london/2017/05/feature-teams-101/&quot;&gt;Moshpit team&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.ebayinc.com/static/assets/Uploads/Editor/_resampled/ResizedImageWzYwMCw2N10/Screen-Shot-2018-11-29-at-17.16.27.png&quot; title=&quot;You can filter by team, project and user.&quot; alt=&quot;Applying filters to the kanban board.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.ebayinc.com/static/assets/Uploads/Editor/_resampled/ResizedImageWzQwMCwyNThd/Screen-Shot-2018-11-29-at-17.16.01.png&quot; title=&quot;Filter in use.&quot; alt=&quot;Filter in use.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to be more visual, there are also “blocker” and “blocked” tags. The banners also auto neutralize when a broken PR is fixed by a later PR.&lt;/p&gt;

&lt;p&gt;After making sure your card has no blockers, you can deploy, and the card will move to the correct column. There’s also a detailed view of cards for when you want to revisit them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.ebayinc.com/static/assets/Uploads/Editor/_resampled/ResizedImageWzYwMCwyNDZd/Screen-Shot-2018-11-29-at-17.22.59.png&quot; title=&quot;Detailed view of a card.&quot; alt=&quot;Detailed view of a card.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This has helped us support each other better as engineers and has been key in helping communication between different teams. It was also a great way for me to learn the whole lifecycle of the development process as an &lt;a href=&quot;https://ebaytech.london/2018/03/internship/&quot;&gt;intern&lt;/a&gt;.&lt;/p&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;mdave248&quot;, &quot;github&quot;=&gt;&quot;mdave16&quot;}</name></author><category term="Internal Tools" /><category term="eBay" /><category term="Agile" /><category term="Developer Tools" /><category term="Interns" /><category term="New Hires" /><category term="Culture" /><category term="Shutl" /><category term="Ruby" /><summary type="html">At eBay, each development team works with multiple distributed teams. To keep everyone on the same page with the different projects that they are working on, we built a tool called ShipShip to help keep information flowing.</summary></entry></feed>